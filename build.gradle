plugins {
    id("org.jetbrains.kotlin.jvm") version "1.7.10"
    id("org.jetbrains.kotlin.kapt") version "1.7.10"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.7.10"

    // Bundle all dependencies into one fat shadowed jar.
    // (Gets automatically triggered when application plugin is present)
    id("com.github.johnrengelman.shadow") version "7.1.2"

    // Add no-argument constructors as they are needed for JPA (see https://kotlinlang.org/docs/reference/compiler-plugins.html#jpa-support).
    id "org.jetbrains.kotlin.plugin.jpa" version "1.7.10"

    // Plugin for gRPC protobuf generation
    id 'com.google.protobuf' version "0.8.19"

    //id("io.micronaut.application") version "3.5.0" // is equivalent to:
    id 'io.micronaut.minimal.application' version '3.5.0'
    //id 'io.micronaut.docker' version '3.5.0'
    id 'io.micronaut.graalvm' version '3.5.0'
    //id 'application'
}


version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")




    // Kotlin
    /// Provide kotlin-reflect although not used, as the jackson-kotlin module might provide its own, but maybe for an earlier Kotlin version, which would mess up things (or at least yield warnings).
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

    // Tests
    /// JUnit
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    /// Mockito
    //testImplementation "org.mockito:mockito-junit-jupiter:$mockitoJunitJupiterVersion"
    /// Assertions
    testImplementation "org.assertj:assertj-core:$assertjVersion"

    // Logging
    // See http://saltnlight5.blogspot.com/2013/08/how-to-configure-slf4j-with-different.html for a quick introduction to slf4j
    implementation "io.github.microutils:kotlin-logging-jvm:$kotlinLoggingVersion"
    runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
    runtimeOnly "net.logstash.logback:logstash-logback-encoder:$logstashLogbackVersion"
    runtimeOnly "com.mattbertolini:liquibase-slf4j:$liquibaseSlf4jVersion" // makes Liquibase use SLF4J instead of java.util.logging
    runtimeOnly "org.slf4j:jcl-over-slf4j:$jclOverSlf4jVersion" // redirect Jakarta/Apache Commons Logging to SLF4J

    // Micronaut Bill of Materials, which defines dependency versions
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")

    // Micronaut Core
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.kotlin:micronaut-kotlin-runtime"
    implementation "javax.annotation:javax.annotation-api"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation 'org.reactivestreams:reactive-streams' // seems to be needed in Micronaut 3.0.1

    // Micronaut Inversion of Control / Dependency Injection
    kapt "io.micronaut:micronaut-inject-java"
    kaptTest "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    // Micronaut Reactive
    //implementation "io.micronaut.rxjava2:micronaut-rxjava2" // use RxJava2 for existing implementations (e.g. ConfigurableCredentialAuthenticationProvider)
    implementation "io.micronaut.reactor:micronaut-reactor"
    implementation "io.micronaut.reactor:micronaut-reactor-http-client"

    // Micronaut Validation
    kapt "io.micronaut:micronaut-validation"
    //implementation 'io.micronaut.configuration:micronaut-hibernate-validator' // if full Bean Validator 2.0 compliance is needed
    implementation("io.micronaut:micronaut-validation") // TODO: this is not in my config

    // Micronaut HTTP Server
    implementation "io.micronaut:micronaut-http-server-netty"

    // Micronaut HTTP Client
    implementation "io.micronaut:micronaut-http-client"

    // Micronaut Management & Monitoring
    /// Automatically provides the /health endpoint publicly, and some other with authentication
    implementation 'io.micronaut:micronaut-management'
    //implementation 'io.micronaut.configuration:micronaut-jmx' // activate JMX for the endpoints

        // Micronaut Persistence
    kapt "io.micronaut.data:micronaut-data-processor"
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa"
    /// JDBC Connection Pooling
    runtimeOnly "io.micronaut.sql:micronaut-jdbc-hikari"
    //runtimeOnly "io.micronaut.sql:micronaut-jdbc-tomcat"
    //runtimeOnly "io.micronaut.sql:micronaut-jdbc-dbcp"
    /// Database drivers
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client:$mariadbVersion"
    //runtimeOnly "org.postgresql:postgresql:$postgresqlVersion"
    //runtimeOnly "org.hsqldb:hsqldb:$hsqldbVersion"
    //runtimeOnly "org.apache.derby:derby:$derbyVersion"
    /// Database Migration
    implementation "io.micronaut.liquibase:micronaut-liquibase"

    // Micronaut Security
    kapt "io.micronaut.security:micronaut-security-annotations"
    implementation "io.micronaut.security:micronaut-security"

    // Micronaut Service registration and discovery
    implementation "io.micronaut.discovery:micronaut-discovery-client"

    // Micronaut OpenAPI integration
    kapt "io.micronaut.openapi:micronaut-openapi"
    implementation "io.swagger.core.v3:swagger-annotations"

    // Micronaut gRPC
    implementation "io.micronaut.grpc:micronaut-grpc-server-runtime"
    implementation "io.micronaut.grpc:micronaut-grpc-client-runtime"
    implementation "io.grpc:grpc-services:$grpcVersion"
    implementation "io.grpc:grpc-kotlin-stub:$grpcKotlinVersion"
}


application {
    mainClass.set("com.example.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}
graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

graalvmNative {
    binaries {
        main {
            // debug = true // Generate debug info
            // verbose = true

            buildArgs.add("--trace-class-initialization=kotlin.KotlinVersion,kotlin.jvm.internal.Reflection")
        }
    }
}